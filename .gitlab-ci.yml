before_script:
  - git lfs pull


stages:
    - test
    - deploy


test_enpt:
  stage: test
  script:
    - source /root/miniconda3/bin/activate ci_env

    # update geoarray and py_tools_ds
    - pip install 'geoarray>=0.8.11'
    - pip install 'py_tools_ds>=0.14.23'

    # # install sicor and perhaps switch sicor branch
    # - mkdir /tmp/sicor_tables
    # - mv /tmp/sicor/sicor/tables/*.h5 /tmp/sicor_tables
    # - mv /tmp/sicor/sicor/tables/EnMAP_LUT* /tmp/sicor_tables
    # - rm -rf /tmp/sicor
    # - git clone https://gitext.gfz-potsdam.de/EnMAP/sicor.git /tmp/sicor
    # # - git clone -b feature/improve_speed https://gitext.gfz-potsdam.de/EnMAP/sicor.git /tmp/sicor
    # - mv /tmp/sicor_tables/* /tmp/sicor/sicor/tables
    # - rm -rf /tmp/sicor_tables/
    # - pip install -e /tmp/sicor

    # update sicor
    # - rm -rf context/sicor
    # - git clone https://gitext.gfz-potsdam.de/EnMAP/sicor.git ./context/sicor
    # - cd ./context/sicor
    # - make download-tables
    # - python setup.py install
    # - cd ../../
    - conda install -c conda-forge pygrib  # FIXME remove as soon as docker container is rebuilt
    - pip install -U sicor

    # run nosetests
    - make nosetests  # test are called here

    # create the docs
    - pip install sphinx_rtd_theme  # Read-the-docs theme for SPHINX documentation
    - make docs
  artifacts:
    paths:
    - htmlcov/
    - docs/_build/html/
    - nosetests.html
    - nosetests.xml
    - tests/linting
  when: always


test_styles:
  stage: test
  script:
    - source /root/miniconda3/bin/activate ci_env
    - make lint
  artifacts:
    paths:
    # - tests/data/test_outputs/*.log  # log files are deleted by test teardown method
    - tests/linting/flake8.log
    - tests/linting/pycodestyle.log
    - tests/linting/pydocstyle.log
    when: always


test_urls:
  stage: test
  script:
    - source /root/miniconda3/bin/activate ci_env
    - pip install -U urlchecker
    - make urlcheck
  when: always


test_enpt_install:
  stage: test
  script:
    - source /root/miniconda3/bin/activate
    - conda update conda
    - conda create -y -q -c conda-forge --name enpt_test python=3
    - conda activate enpt_test

    # update conda and python
    - conda update -n base -c conda-forge conda
#    - conda update -c conda-forge python

    # avoid package incompatibilities
    # - conda config --set channel_priority strict  # otherwise gdal or libgdal may be installed from defaults channel

    # install some dependencies that cause trouble when installed via pip
    - conda install -y -c conda-forge numpy pandas lxml

    # install not pip-installable deps of py_tools_ds / geoarray / sensormapgeo
    - conda install -y -c conda-forge gdal scikit-image pyproj geopandas matplotlib cartopy shapely pyresample

    # install not pip-installable deps of arosics
    - conda install -y -c conda-forge pyfftw pykrige

    # install not pip-installable deps of sicor
    - conda install -y -q -c conda-forge glymur cachetools pyhdf h5py pytables llvmlite numba scikit-learn pygrib

    # install enpt
    - pip install -e .
    - cd ..
    - pwd
    - ls

    # test importability
    - python -c "import enpt; print(enpt)"
    - python -c "from enpt.model.images import EnMAPL1Product_SensorGeo"
  only:
    - master
    - dev


pages:
  stage: deploy
  dependencies:
    - test_enpt
  script:
    # Create the public directory
    - rm -rf public
    - mkdir public
    - mkdir -p public/doc
    - mkdir -p public/img
    - mkdir -p public/coverage
    - mkdir -p public/nosetests_reports

    # Copy over the docs
    - cp -r docs/_build/html/* public/doc/
    - cp -r docs/img/* public/img/

    # Copy over the coverage reports
    - cp -r htmlcov/* public/coverage/

    # Copy over the nosetests reports
    - cp nosetests.* public/nosetests_reports/

    # Check if everything is working great
    - ls -al public
    - ls -al public/doc
    - ls -al public/coverage
    - ls -al public/nosetests_reports
  artifacts:
    paths:
      - public
    expire_in: 10 days
  only:
    - master
    - enhancement/improve_docs


deploy_pypi:
  stage: deploy
  dependencies:
    - test_enpt
  script:
    - source /root/miniconda3/bin/activate ci_env
    - pip install -U twine
    - python setup.py sdist
    - twine upload dist/*  # requires creds as environment variables
  only:
    - /^v\d+\.\d+\.\d+([abc]\d*)?$/  # PEP-440 compliant version (tags)
  except:
    - dev


create_github_release:
    stage: deploy
    dependencies:
        - test_enpt
    script:
        - bash ./.github/create_release_from_gitlab_ci.sh  # uses environment variables set in the UI
    only:
        - /^v\d+\.\d+\.\d+([abc]\d*)?$/  # PEP-440 compliant version (tags)
    except:
        - dev
